#!/usr/bin/env python3

import argparse
import datetime

parser = argparse.ArgumentParser(
    description='Create config/constants files for python and c++')
parser.add_argument('--python-output-dir', default='../src/webapp/',
                    help='Directory to output python config.py')
parser.add_argument('--cpp-output-dir', default='../src/controller/',
                    help='Directory to output c++ config.h')

parser.add_argument('--udp-port', type=int, default=8000, help='Port to send udp packets to ESP.')
parser.add_argument('--ack-port', type=int, default=8001, help='Port to recieve ack packets from ESP.')
parser.add_argument('--packet-buffer-size', type=int, default=2048, help='Size of packet buffer on ESP. This value may not be safe to change.')
parser.add_argument('--max-brightness', type=int, default=127, choices=range(0, 256), help='Maximum pixel brightnes. Must be in range 0 to 255.')
parser.add_argument('--brightness-multiplier', type=float, default=0.5, help='Amount to multiple brightness values by on ESP. Should be in range 0 to 1.')
parser.add_argument('--debug-print', type=str, default='false', help='Print extra debug statements on ESP.')
parser.add_argument('--init-brightness', type=int, default=100, help='Initial brightness.')
parser.add_argument('--init-frame-ms', type=int, default=30, help='Initial frame ms.')
parser.add_argument('--init-frame-multiplier', type=int, default=1, help='Initial frame multiplier.')
args = parser.parse_args()

timestamp = datetime.datetime.now()


def cpp(path):
    def line(type, name, value):
        return f'constexpr {type} {name} = {value};\n'

    with open(f'{path}config.h', 'w') as file:
        file.write(f'// This file was auto generated by config_generator at {timestamp}\n')
        file.write('// DO NOT EDIT THIS FILE\n')
        file.write('\n')
        file.write('#ifndef CONFIG_H_\n')
        file.write('#define CONFIG_H_\n')
        file.write('\n')
        file.write(line('int', 'UDP_PORT', args.udp_port))
        file.write(line('int', 'ACK_PORT', args.ack_port))
        file.write(line('int', 'PACKET_BUFFER_SIZE', args.packet_buffer_size))
        file.write(line('int', 'MAX_BRIGHTNESS', args.max_brightness))
        file.write(line('float', 'BRIGHTNESS_MULTIPLIER', args.brightness_multiplier))
        file.write(line('bool', 'DEBUG_PRINT', args.debug_print))
        file.write('\n')
        file.write(line('int', 'INIT_BRIGHTNESS', args.init_brightness))
        file.write(line('int', 'INIT_FRAME_MS', args.init_frame_ms))
        file.write(line('int', 'INIT_FRAME_MULTIPLIER', args.init_frame_multiplier))
        file.write('\n')
        file.write('// CONSTANTS')
        file.write('\n')
        file.write(line('int', 'MAX_LED', 300))
        file.write(line('int', 'LIST_CAPACITY', 500))
        file.write(line('int', 'BITS_PER_BYTE', 8))
        file.write(line('int', 'BITS_PER_USAGE_FLAG', 32))
        file.write(line('int', 'ITEMS_PER_COLOR_BLOCK', 8))
        file.write(line('int', 'MAX_PIXELS_PER_FRAME', 320))
        file.write('\n')
        file.write('#endif  // CONFIG_H_\n')

def python(path):
    def line(name, value):
        return f'{name} = {value}\n'

    with open(f'{path}config.py', 'w') as file:
        file.write(f'# This file was auto generated by config_generator at {timestamp}\n')
        file.write('# DO NOT EDIT THIS FILE\n')
        file.write('\n')
        file.write(line('UDP_PORT', args.udp_port))
        file.write(line('ACK_PORT', args.ack_port))
        file.write(line('PACKET_BUFFER_SIZE', args.packet_buffer_size))
        file.write(line('ESP_IP_ADDRESS', '\'192.168.29.100\''))
        file.write(line('DEFAULT_QUEUE_MAX_SIZE', 5000))
        file.write(line('DEFAULT_BACKGROUND_INTERVAL', 5))
        file.write(line('DEFAULT_PING_INTERVAL', 5))
        file.write('\n')
        file.write('# CONSTANTS')
        file.write('\n')
        file.write(line('MIN_COLOR', -1))
        file.write(line('MAX_COLOR', 16777215))
        file.write(line('BITS_PER_BYTE', 8))
        file.write(line('BITS_PER_USAGE_FLAG', 32))
        file.write(line('ITEMS_PER_COLOR_BLOCK', 8))
        file.write(line('MAX_PIXELS_PER_FRAME', 320))
        

if __name__ == '__main__':
    cpp(args.cpp_output_dir)
    python(args.python_output_dir)
